Factories.insert({
	"gameCode": gameCode,
	"gID": groupNo,
	"item": resName,
	"itemNo": resource,
	"production": productionRate,
	"makeTime": (new Date()).getTime(),
	"lastRun": (new Date()).getTime()
});

AllStocks.insert({
	"gameCode": code,
	"gID": groupIndices[g],
	"groupName": groupNames[groupIndices[g]],
	"itemNo": resList[res],
	"item": resNames[resList[res]],
	"price": price,
	"amount": amount,
	"mean": mean,
	"stdev": Math.random() * stdev,
	"yearmod": {"kind": "none"}
});

RunningGames.insert({
	"gameCode": codeString,
	"player": adminID,
	"playerName": Meteor.users.findOne({"_id": adminID}).username,
	"group": "admin",
	"role": "admin",
	"size": size,
	"lastLogin": (new Date()).getTime(),
	"gameStart": (new Date()).getTime(),
	"currentYear": 2253,
	"elapsedTimeTotal": 0,
	"elapsedTimeYear": 0,
	"status": "running",
	"yearLength": 600000,
},
RunningGames.update({$and: [{"gameCode": code}, {"group": "admin"}]}, {$set: {
	"cheapRes": thisCheapResInds, 
	"expensiveRes": thisExpResInds, 
	"groupNumbers": groupIndices}});


RunningGames.insert({
	"gameCode": gameCode,
	"player": joinerID,
	"playerName": Meteor.users.findOne({"_id": joinerID}).username,
	"group": grp,  (admin, 1/2/3/4)
	"role": role, (admin, homebase, regular)
	"lastLogin": (new Date()).getTime(),
	"status": "running",
	"marketValue": , //these last three only exist for homebase-s
	"rank": 
	""
});

// Request contents explanation:
// "user": requested
// 			[
// 				// {text: "blah blah"},
// 				{requester: },				requester
// 				{requested resource: },		reqRes
// 				{requested amount: },		reqAmt
// 				{receiving resource: },		recvRes		//the resource that the requested person will be receiving
														//i.e. received by requested/recipient/ 'user'
// 				{receiving amount: },		recvAmt
// 				{requestNumber: },			reqNo
// 				{replied: }					replied
// 			]
Alerts.insert({
	"gameCode": gCode,
	"timestamp": (new Date()).getTime(),
	"user": recipient, 
	"username": Meteor.users.findOne({_id: recipient}).username,
	"requestedGroup": RunningGames.findOne({$and: [{"gameCode": gCode}, {"player": recipient}]}).group,
	"type": "request",  
	"contents": {
		"requester": {
			"id": requester, 
			"username": Meteor.users.findOne({_id:requester}).username, 
			"group": RunningGames.findOne({$and: [{"gameCode": gCode}, {"player": requester}]}).group
		},
		"reqRes": takeRes, 
		"reqAmt": parseInt(takeAmt), 
		"recvRes": giveRes, 
		"recvAmt": parseInt(giveAmt), 
		"read": 0
	}
});


	alert = {"text": "All players kicked!", "contextKind": "adminAction", "context": "thisUser"}
	alert["urgency"] = urgency;
	alert["read"] = 0;

Alerts.insert({
	"gameCode": gCode, 
	"timestamp": (new Date()).getTime(), 
	"user": person, 
	"type": "alert", 
	"contents": alert
});


// ###  Alerts' different contexts: 		//

('raiseAlert', 
Meteor.userId(), {
	"text": "clearAll"
}, Session.get("GameCode"));

('raiseAlert', 
Meteor.userId(), {
	"text": "clearOne", 
	"contextKind": "id", 
	"context": e.currentTarget.id
}, Session.get("GameCode"))

('raiseAlert', 
Meteor.userId(), {
	"text": "Sent Request", 
	"contextKind": "requestCreation", 
	"context": result
}, Session.get("GameCode"), "success");

('raiseAlert', 
event.target.Recipient.value, {
	"text": "Request received!", 
	"contextKind": "requestReceival", 
	"context": result
}, Session.get("GameCode"), "warning");

('raiseAlert', 
Meteor.userId(), {
	"text": "Request sending failed due to server's fault. The machines are rising against us, run.", 
	"contextKind": "serverError", 
	"context": "server"
}, Session.get("GameCode"), "danger");

Meteor.call('raiseAlert', usr, {"text": text, "contextKind": contextKind, "context": reqId}, Session.get("GameCode"), urgency);
  
	alertFn("Your group doesn't have the item you're trying to give! Trade fail *sad trombone*", "danger", "requestFail");

	alertFn("Your group doesn't have enough of the item you're trying to give! Trade fail *sad trombone*", "warning", "requestFail");

	alertFn("The server's dying man. Sorry", "danger", "requestFail");

	alertFn("Request completed, you have the things you were offered!", "success", "requestSuccess");

	alertFn("Request rejected/failed! :(", "danger", "requestFail", request["requester"].id);

	alertFn("Request completed, you have the things you were offered!", "success", "requestSuccess", request["requester"].id);

